// ============================================================================
//
//  MIXINS & FUNCTIONS
//  A few simple Sass helpers.
//
// 1. Create px font-size value based on percents
// 2. Font-face generation
// 3. Inline px to em conversion
// 4. Px to em conversion tool
//
// ============================================================================

// ============================================================================
// 1. Create px font-size value based on percents
// ============================================================================

// Check font-base unit then calculate output to percent
@if unit($font-base) == '%' {
  $font-base: $font-base;
} @else if unit($font-base) == 'px' {
  $font-base: (100% * $font-base) / 16px;
} @else if unit($font-base) == 'em' {
  $em-to-px: ($font-base / ($font-base * 0 + 1)) * 1px;
  $font-base: round((100% * ($em-to-px * 16)) / 16px);
}

// Check container-max unit then calculate output to pixels
@if unit($container-max) == '%' {
  $container-max: round((($container-max * 16px) / 100%) * 100);
} @else if unit($container-max) == 'px' {
  $container-max: $container-max;
} @else if unit($container-max) == 'em' {
  $em-to-px: ($container-max / ($container-max * 0 + 1)) * 1px;
  $container-max: $em-to-px * 16;
}

// Check gutter unit then calculate output to pixels
@if unit($gutter) == '%' {
  $gutter: round((($gutter * 16px) / 100%) * 100);
} @else if unit($gutter) == 'px' {
  $gutter: $gutter;
} @else if unit($gutter) == 'em' {
  $em-to-px: ($gutter / ($gutter * 0 + 1)) * 1px;
  $gutter: $em-to-px * 16;
}


// ============================================================================
// 2. Font-face generation
// ============================================================================

// Order of the includes matters, and it is: normal, bold, italic, bold+italic.
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
         url('#{$file-path}.woff') format('woff'),
         url('#{$file-path}.ttf') format('truetype'),
         url('#{$file-path}.svg##{$font-family}') format('svg');
  }
}


// ============================================================================
// 3. Inline px to em conversion
// ============================================================================

// Strip units from values
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Calculate ems from pixels
@function em($px, $base: 16) {
  $px: strip-unit($px);
  $base: strip-unit($base);
  @if $px == 1 {
    @return 1px;
  }
  @return ($px / $base) * 1em;
}


// ============================================================================
// 4. Px to em conversion tool
// ============================================================================

// Used as an include
// Accepts any property with dimension value
@mixin em($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: 16px;
  $em-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $em-values: join($em-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == 'px') {
      // px value given - calculate em value from font-size
      $new-em-value: $value / $font-size;
      $em-values: join($em-values, #{$new-em-value}em);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or em
      $em-values: join($em-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or em
      $em-values: join($em-values, auto);
    } @else {
      // unitless value - use those directly as em and calculate the px-fallback
      $em-values: join($em-values, #{$value}em);
    }
  }

  // output the converted rules
  #{$property}: $em-values;
}