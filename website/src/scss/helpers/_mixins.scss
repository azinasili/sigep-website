// ----------------------------------------------------------------------------
// Mixins and Functions
// Simple helpers to write CSS easier.
//
// 1. Inline px to em conversion
// 2. Px to em conversion tool
// 3. CSS triangles
//
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// 1. Inline px to em conversion
// ----------------------------------------------------------------------------

// Strip units from values
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Calculate ems from pixels
@function em($px, $base: 16) {
  $px: strip-unit($px);
  $base: strip-unit($base);
  @if $px == 1 {
    @return 1px;
  }
  @return ($px / $base) * 1em;
}


// ----------------------------------------------------------------------------
// 2. Px to em conversion tool
// ----------------------------------------------------------------------------

// Used as an include
// Accepts any property with dimension value
@mixin em($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: 16px;
  $em-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $em-values: join($em-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == 'px') {
      // px value given - calculate em value from font-size
      $new-em-value: $value / $font-size;
      $em-values: join($em-values, #{$new-em-value}em);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or em
      $em-values: join($em-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or em
      $em-values: join($em-values, auto);
    } @else {
      // unitless value - use those directly as em and calculate the px-fallback
      $em-values: join($em-values, #{$value}em);
    }
  }

  // output the converted rules
  #{$property}: $em-values;
}


// ----------------------------------------------------------------------------
// 3. CSS triangles
// ----------------------------------------------------------------------------

// Mixin to easily create triangles
// $direction accepts up, down, left, right, top-right, top-left, bottom-right, bottom-left
// $size accepts px, em, and rem values
// $color accepts hex, rgb(a), and hsl values
@mixin triangle($direction, $size, $color) {
	border: $size solid transparent;

  // displays triangle pointing down
  @if $direction == bottom {
    border-top-color: $color;
  }
  // displays triangle pointing left
  @else if $direction == left {
    border-right-color: $color;
  }
  // displays triangle pointing up
  @else if $direction == top {
    border-bottom-color: $color;
  }
  // displays triangle pointing right
  @else if $direction == right {
    border-left-color: $color;
  }
  // displays triangle pointing top left
  @else if $direction == top-left {
    border-top-color: $color;
    border-left-color: $color;
  }
  // displays triangle pointing top right
  @else if $direction == top-right {
    border-top-color: $color;
    border-right-color: $color;
  }
  // displays triangle pointing bottom right
  @else if $direction == bottom-right {
    border-right-color: $color;
    border-bottom-color: $color;
  }
  // displays triangle pointing bottom left
  @else if $direction == bottom-left {
    border-bottom-color: $color;
    border-left-color: $color;
  }
}
